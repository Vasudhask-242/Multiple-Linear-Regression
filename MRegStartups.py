# -*- coding: utf-8 -*-
"""
Created on Sat Mar 16 12:14:15 2024

@author: HP
"""

#Problem Statements: -
'''
    An analytics company has been tasked with the crucial job of finding out what 
    factors affect a startup company and if it will be profitable or not. For this,
    they have collected some historical data and would like to apply multilinear 
    regression to derive brief insights into their data. Predict profit, given 
    different attributes for various startup companies.
'''
#Business Objective
'''
    The business objective is to identify the factors affecting the 
    profitability of startup companies using historical data and applying 
    multilinear regression to gain insights for predicting profit based on 
    different attributes.
'''
#Data Dictionary
'''
     Feature Name    | Data Type | Description                              | Relevant to Model 
    -----------------|-----------|------------------------------------------|-------------------
     R&D Spend       | Float     | Amount spent on Research and Development | Yes               
     Administration  | Float     | Amount spent on Administration           | Yes               
     Marketing Spend | Float     | Amount spent on Marketing                | Yes               
     State           | Object    | State in which the startup operates      | No                
     Profit          | Float     | Profit generated by the startup          | Yes   
'''            


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score

# Load the data
data = pd.read_csv('C:/0-Assignments/Assignments/MultiReg/Startups.csv.xls')

data.shape
#(50, 5)
data.info()
'''
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 50 entries, 0 to 49
    Data columns (total 5 columns):
     #   Column           Non-Null Count  Dtype  
    ---  ------           --------------  -----  
     0   R&D Spend        50 non-null     float64
     1   Administration   50 non-null     float64
     2   Marketing Spend  50 non-null     float64
     3   State            50 non-null     object 
     4   Profit           50 non-null     float64
    dtypes: float64(4), object(1)
    memory usage: 2.1+ KB
'''


# Data Pre-processing
# Check for missing values
missing_values = data.isnull().sum()
print("Missing Values:\n", missing_values)

# Outlier Treatment
# Visualize numerical features using boxplots
plt.figure(figsize=(10, 6))
sns.boxplot(data=data[['R&D Spend', 'Administration', 'Marketing Spend']])
plt.title("Boxplot of Numerical Features")
plt.show()          #outliers are not present 

# Exploratory Data Analysis (EDA)
# Summary Statistics
data.describe()
'''
               R&D Spend  Administration  Marketing Spend         Profit
    count      50.000000       50.000000        50.000000      50.000000
    mean    73721.615600   121344.639600    211025.097800  112012.639200
    std     45902.256482    28017.802755    122290.310726   40306.180338
    min         0.000000    51283.140000         0.000000   14681.400000
    25%     39936.370000   103730.875000    129300.132500   90138.902500
    50%     73051.080000   122699.795000    212716.240000  107978.190000
    75%    101602.800000   144842.180000    299469.085000  139765.977500
    max    165349.200000   182645.560000    471784.100000  192261.830000

'''

# Univariate Analysis
plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
sns.histplot(data['R&D Spend'], kde=True)
plt.title("R&D Spend Distribution")
plt.subplot(1, 3, 2)
sns.histplot(data['Administration'], kde=True)
plt.title("Administration Distribution")
plt.subplot(1, 3, 3)
sns.histplot(data['Marketing Spend'], kde=True)
plt.title("Marketing Spend Distribution")
plt.show()

# Bivariate Analysis
plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
sns.scatterplot(data=data, x='R&D Spend', y='Profit')
plt.title("R&D Spend vs Profit")
plt.subplot(1, 3, 2)
sns.scatterplot(data=data, x='Administration', y='Profit')
plt.title("Administration vs Profit")
plt.subplot(1, 3, 3)
sns.scatterplot(data=data, x='Marketing Spend', y='Profit')
plt.title("Marketing Spend vs Profit")
plt.show()

# Model Building
# Prepare data
X = data[['R&D Spend', 'Administration', 'Marketing Spend']]
y = data['Profit']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Multilinear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# Model Evaluation
# Training set
y_train_pred = model.predict(X_train)
train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
train_r2 = r2_score(y_train, y_train_pred)

# Test set
y_test_pred = model.predict(X_test)
test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
test_r2 = r2_score(y_test, y_test_pred)

# Print results
print("Multilinear Regression Results:")
print("Training RMSE:", train_rmse)     #8938.013440232062
print("Training R-squared:", train_r2)  #0.9535927757257411
print("Test RMSE:", test_rmse)          #8995.905803361416
print("Test R-squared:", test_r2)       #0.900065308303732

# Plot regression line
plt.figure(figsize=(10, 6))

# Scatter plot of actual data points
plt.scatter(X_train['R&D Spend'], y_train, color='blue', label='Actual')

# Predicted values
plt.plot(X_train['R&D Spend'], y_train_pred, color='red', label='Predicted')

plt.title('Regression Line for R&D Spend vs Profit')
plt.xlabel('R&D Spend')
plt.ylabel('Profit')
plt.legend()
plt.show()
